{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","isRunning","setIsRunning","stage","setStage","sessionTime","setSessionTime","breakTime","setBreakTime","timeLeft","setTimeLeft","audioRef","useRef","minToSec","min","useEffect","timer","prevStage","current","play","clearInterval","setInterval","prevTimeLeft","className","id","secRaw","sec","formatTime","type","onClick","prev","pause","load","prevSessionTime","prevBreakTime","ref","el","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35a61db5.chunk.js","sourcesContent":["// import logo from \"./logo.svg\";\nimport { useState, useEffect, useRef } from \"react\";\nimport \"./App.scss\";\n\nexport default function App() {\n  //29/29 \n  //=============INIT================================\n  const [isRunning, setIsRunning] = useState(false);\n  const [stage, setStage] = useState(\"session\");\n  const [sessionTime, setSessionTime] = useState(25);\n  const [breakTime, setBreakTime] = useState(5);\n  const [timeLeft, setTimeLeft] = useState(\n    () => (stage === \"session\" ? sessionTime : breakTime) * 60\n  );\n\n  //============AUDIO=================================\n  const audioRef = useRef();\n  function playSound() {\n    if (audioRef.current !== null) {\n      audioRef.current.play();\n    }\n  }\n  function resetSound() {\n    audioRef.current.pause();\n    audioRef.current.load();\n  }\n\n  // ==========FORMATTING/CONVERTING HELPERS============\n  const minToSec = (min) => min * 60;\n  const formatTime = (secRaw) => {\n    let min = (secRaw / 60) ^ 0;\n    let sec = secRaw % 60 ^ 0;\n    min = min < 10 ? `0${min}` : min;\n    sec = sec < 10 ? `0${sec}` : sec;\n    return `${min}:${sec}`;\n  };\n\n  // =======SETTINGS HANDLERS===========================\n  //settings handlers refactor this!\n  const increaseSessionTime = () => {\n    if (sessionTime < 60 && !isRunning) {\n      setSessionTime((prevSessionTime) => prevSessionTime + 1);\n      setTimeLeft((prevTimeLeft) => prevTimeLeft + 60);\n\n    } \n    return false;\n  };\n  const decreaseSessionTime = () => {\n    if (sessionTime > 1 && !isRunning) {\n      setSessionTime((prevSessionTime) => prevSessionTime - 1);\n      setTimeLeft((prevTimeLeft) => prevTimeLeft - 60);\n    } \n      return false;\n    \n  };\n  const increaseBreakTime = () => {\n    if (breakTime < 60 && !isRunning) {\n      setBreakTime((prevBreakTime) => prevBreakTime + 1);\n    } \n      return false;\n    \n  };\n  const decreaseBreakTime = () => {\n    if (breakTime > 1 && !isRunning) {\n      setBreakTime((prevBreakTime) => prevBreakTime - 1);\n    }\n      return false;\n    \n  };\n\n  // BUTTONS HANDLERS=======================\n  const reset = () => {\n    setStage(\"session\");\n    setSessionTime(25);\n    setBreakTime(5);\n    setTimeLeft(() => minToSec(25));\n    setIsRunning(false);\n    resetSound();\n  };\n\n  const startPause = () => setIsRunning((prev) => !prev);\n\n  // ==========TIMER================================\n  useEffect(() => {\n    let timer = null;\n    if (timeLeft === 0) {\n      setStage((prevStage) => (prevStage === \"session\" ? \"break\" : \"session\"));\n      setTimeLeft(() =>\n        minToSec(stage === \"session\" ? breakTime : sessionTime)\n      );\n\n      playSound();\n      return () => {\n        clearInterval(timer);\n      };\n    }\n\n    if (isRunning) {\n      // set interval\n      timer = setInterval(() => {\n        setTimeLeft((prevTimeLeft) => prevTimeLeft - 1);\n      }, 1000);\n    } else if (!isRunning && timeLeft !== 0) {\n      //this   part is for pausing\n      clearInterval(timer);\n    }\n    return () => clearInterval(timer);\n  }, [breakTime, isRunning, sessionTime, stage, timeLeft]);\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1 className=\"title\">25 + 5 Clock</h1>\n      </div>\n      <div className=\"timer\">\n        <div className=\"timer__info\">\n          <div id=\"timer-label\">{stage}</div>\n\n          <div id=\"time-left\">{formatTime(timeLeft)}</div>\n        </div>\n        <div className=\"timer__buttons\">\n          <button type=\"button\" id=\"start_stop\" className=\"btn\" onClick={startPause}>\n            {isRunning ? \"pause\" : \"start\"}\n          </button>\n          <button type=\"button\" id=\"reset\" className=\"btn\" onClick={reset}>\n            reset\n          </button>\n        </div>\n      </div>\n      <div className=\"settings\">\n        <div className=\"settings_header\">\n          <h3>settings</h3>\n        </div>\n        <div className=\"session\">\n          <div id=\"session-label\">session</div>\n          <div className=\"settings-wrap\">\n            <button type=\"button\" id=\"session-increment\" onClick={increaseSessionTime}>\n              +\n            </button>\n            <div id=\"session-length\">{sessionTime}</div>\n            <button type=\"button\" id=\"session-decrement\" onClick={decreaseSessionTime}>\n              -\n            </button>\n          </div>\n        </div>\n        <div className={`break`}>\n          <div id=\"break-label\">break</div>\n          <div className=\"settings-wrap\">\n            <button type=\"button\" id=\"break-increment\" onClick={increaseBreakTime}>\n              +\n            </button>\n            <div id=\"break-length\">{breakTime}</div>\n            <button type=\"button\" id=\"break-decrement\" onClick={decreaseBreakTime}>\n              -\n            </button>\n          </div>\n        </div>\n      </div>\n      <audio\n        id=\"beep\"\n        ref={(el) => (audioRef.current = el)}\n        src={\"https://www.soundjay.com/nature/water-dripping-1.mp3\"}\n      />\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}